# Official docker image.
image: docker:latest

# Builds use :deps image cached by latest build-develop run
# All tags and branches create a matching docker image tag (ref slug)
# Each develop commit creates a matching docker image tag (sha of commit) and updates :latest

stages:
  - test
  - build
  - deploy

test:
  stage: test
  image: maven:3-jdk-11
  cache:
    key: m2-${CI_COMMIT_REF_SLUG}
    paths:
      - .m2
  script:
    - mvn clean package
  only:
    - disabled

backend-tags:
  stage: build
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:deps || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:deps -t $CI_REGISTRY_IMAGE:deps --target deps .
    - docker build --pull -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  only:
    - tags

backend-develop:
  stage: build
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:deps || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:deps -t $CI_REGISTRY_IMAGE:deps --target deps .
    - docker build --pull -t "$CI_REGISTRY_IMAGE:develop-$CI_COMMIT_SHORT_SHA" .
    - docker tag "$CI_REGISTRY_IMAGE:develop-$CI_COMMIT_SHORT_SHA" "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:develop-$CI_COMMIT_SHORT_SHA"
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:deps
  only:
    - develop

backend-branches:
  stage: build
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:deps || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:deps -t $CI_REGISTRY_IMAGE:deps --target deps .
    - docker build --pull --cache-from $CI_REGISTRY_IMAGE:deps -t $CI_REGISTRY_IMAGE:branch-$CI_COMMIT_REF_SLUG .
    - docker push "$CI_REGISTRY_IMAGE:branch-$CI_COMMIT_REF_SLUG"
  only:
    - branches
  except:
    - master
    - develop

ui:
  image: node:10
  stage: build
  cache:
    key: npm-${CI_COMMIT_REF_SLUG}
    paths:
      - EMS-UI/node_modules
      - /usr/local/lib/node_modules
  script:
    - cd EMS-UI
    - npm install -g @angular/cli
    - npm install
    - cp src/environments/environment.prod.ts src/environments/environment.ts
    - ng build
  artifacts:
    expire_in: 1 week
    paths:
      - EMS-UI/dist/

eb-tags:
  stage: deploy
  dependencies:
    - ui
  script:
    - apk add zip
    - sed s/{{tag}}/$CI_COMMIT_REF_SLUG/ eb/Dockerrun.aws.template.json > eb/Dockerrun.aws.json
    - cd eb && zip -r ../$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-eb.zip Dockerrun.aws.json .ebextensions
    - cd ../EMS-UI/dist && zip -r ../../$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-eb.zip cdss-ui
  only:
    - tags
  artifacts:
    paths:
      - "*-eb.zip"
      - README.md

eb-develop:
  stage: deploy
  dependencies:
    - ui
  script:
    - apk add zip
    - sed s/{{tag}}/develop-$CI_COMMIT_SHORT_SHA/ eb/Dockerrun.aws.template.json > eb/Dockerrun.aws.json
    - cd eb && zip -r ../$CI_PROJECT_NAME-develop-$CI_COMMIT_SHORT_SHA-eb.zip Dockerrun.aws.json .ebextensions
    - cd ../EMS-UI/dist && zip -r ../../$CI_PROJECT_NAME-develop-$CI_COMMIT_SHORT_SHA-eb.zip cdss-ui
  only:
    - develop
  artifacts:
    expire_in: 1 week
    paths:
      - "*-eb.zip"
      - README.md

eb-branches:
  stage: deploy
  dependencies:
    - ui
  script:
    - apk add zip
    - sed s/{{tag}}/branch-$CI_COMMIT_REF_SLUG/ eb/Dockerrun.aws.template.json > eb/Dockerrun.aws.json
    - cd eb && zip -r ../$CI_PROJECT_NAME-branch-$CI_COMMIT_REF_SLUG-eb.zip Dockerrun.aws.json .ebextensions
    - cd ../EMS-UI/dist && zip -r ../../$CI_PROJECT_NAME-branch-$CI_COMMIT_REF_SLUG-eb.zip cdss-ui
  only:
    - branches
  except:
    - develop
  artifacts:
    expire_in: 1 week
    paths:
      - "*-eb.zip"
      - README.md