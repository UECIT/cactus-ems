# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ master, develop ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Cache maven artifacts
      uses: actions/cache@v2
      env:
        cache-name: cache-maven
      with:
        path: ~/.m2
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Maven
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/cdss_decoupling?useSSL=false
        SPRING_DATASOURCE_USERNAME: root
        SPRING_DATASOURCE_PASSWORD: root
        GITHUB_USER: UECIT
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        sudo systemctl start mysql
        mysql -uroot -proot < $GITHUB_WORKSPACE/src/main/resources/sql/create_database.sql
        mvn -B package --file pom.xml --settings settings.xml

  publish-app:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Cache maven artifacts
      id: cache-maven
      uses: actions/cache@v2
      env:
        cache-name: cache-maven
      with:
        path: m2cache
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Download dependencies
      if: steps.cache-maven.outputs.cache-hit != 'true'
      env:
        GITHUB_USER: UECIT
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: mvn -B -Dmaven.repo.local=m2cache dependency:go-offline dependency:resolve-plugins --file pom.xml --settings settings.xml

    - name: Push EMS Backend to GitHub Packages
      uses: docker/build-push-action@v1
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: docker.pkg.github.com
        repository: uecit/cactus-ems/cactus-ems
        tag_with_ref: true
        tag_with_sha: true
        build_args: GITHUB_USER=${{ github.actor }},GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}

  build-ui:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Build and run angular ui tests
        run: |
          cd EMS-UI
          npm ci
          npm run test:ci

  publish-ui:
    runs-on: ubuntu-latest
    needs: build-ui
    steps:
      - uses: actions/checkout@v2

      - name: Push EMS UI to GitHub Packages
        uses: docker/build-push-action@v1
        with:
          path: EMS-UI
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: docker.pkg.github.com
          repository: uecit/cactus-ems/cactus-ems-ui
          tag_with_ref: true
          tag_with_sha: true

  deploy-staging:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    needs: [publish-app, publish-ui]
    steps:
      - name: Deploy to staging environment
        uses: distributhor/workflow-webhook@v1
        env:
          webhook_url: ${{ secrets.STAGING_WEBHOOK_URL }}
          webhook_secret: ${{ secrets.STAGING_WEBHOOK_SECRET }}

  deploy-prod:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: [publish-app, publish-ui]
    steps:
      - name: Deploy to production environment
        uses: distributhor/workflow-webhook@v1
        env:
          webhook_url: ${{ secrets.PROD_WEBHOOK_URL }}
          webhook_secret: ${{ secrets.PROD_WEBHOOK_SECRET }}
